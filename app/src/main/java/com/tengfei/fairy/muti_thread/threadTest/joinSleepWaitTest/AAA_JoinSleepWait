多线程：https://www.cnblogs.com/wxd0108/p/5479442.html

    线程在Running的过程中可能会遇到阻塞(Blocked)情况
1、调用join()和sleep()方法，sleep()时间结束或被打断，join()中断,IO完成都会回到Runnable状态，等待JVM的调度。
2、调用wait()，使该线程处于等待池(wait blocked pool),直到notify()/notifyAll()，线程被唤醒被放到锁定池(lock blocked pool )，释放同步锁使线程回到可运行状态（Runnable）
3、对Running状态的线程加同步锁(Synchronized)使其进入(lock blocked pool ),同步锁被释放进入可运行状态(Runnable)。
4、此外，在runnable状态的线程是处于被调度的线程，此时的调度顺序是不一定的。Thread类中的yield方法可以让一个running状态的线程转入runnable。

一、join和sleep区别
1、sleep(long)方法在睡眠时不释放对象锁
2、join(long)方法在等待的过程中释放对象锁
3、sleep是让调用线程进入阻塞状态


二、sleep和wait区别
1、sleep是Thread类的静态方法，wait是object的方法
2、sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是他的监控状态依然保持者，
当指定的时间到了又会自动恢复运行状态。在调用sleep()方法的过程中，线程不会释放对象锁。
3、而当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备
4、sleep方法需要抛异常,wait方法不需要
5、sleep方法可以在任何地方使用,wait方法只能在同步方法和同步代码块中使用
