package com.tengfei.fairy.wedget.sign;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.drawable.Drawable;import android.text.Html;import android.util.Log;import android.view.View;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.bjrxtd.sdk.constant.Constant;import com.tengfei.fairy.R;import com.tengfei.fairy.base.BaseActivity;import com.tengfei.fairy.config.Constans;import com.tengfei.fairy.config.Constants;import com.tengfei.fairy.utils.FileUtil;import com.tengfei.fairy.utils.StringUtil;import com.tengfei.fairy.utils.ToastTools;import org.json.JSONException;import org.json.JSONObject;/** * 电子签名Activity */public class SignNameActivity extends BaseActivity implements View.OnClickListener, SignatureView.ISignatureCallBack {    private TextView mSignTipsTv;    private TextView mCancleBtn;    private TextView mClearBtn;    private TextView mFinishBtn;    private TextView mTvLogo;    private LinearLayout mSaveView;    private SignatureView mSignatureView;    private String callback;    private String mEleStr;    @Override    protected int getContentLayout() {        return R.layout.activity_sign_name_view;    }    @Override    protected void initGui() {        Log.i("======Sign","SignAct==========");        String tipsStr = "<img src=\"" + R.drawable.sign_tips_icon + "\"/>" + "<font color=" + getResources().getColor(R.color.color_FF6D26) + ">"                + getResources().getString(R.string.sign_tips) + "</font>";        mSignTipsTv = findViewById(R.id.signTipsTv);        mCancleBtn = findViewById(R.id.cancleBtn);        mClearBtn = findViewById(R.id.clearBtn);        mFinishBtn = findViewById(R.id.finishBtn);        mSignatureView = findViewById(R.id.signatureView);        mTvLogo = findViewById(R.id.tv_Logo);        mTvLogo.setText("签名");        mSaveView = findViewById(R.id.saveView);        mSignTipsTv.setText(Html.fromHtml(tipsStr, imageGetter, null));        String stringExtra = getIntent().getStringExtra(Constants.INTENG_FLAG);        if (StringUtil.isNotEmpty(stringExtra)) {            JSONObject jsonObject = null;            try {                jsonObject = new JSONObject(stringExtra);                String viewtitle = jsonObject.getString("title");                callback = jsonObject.getString("callback");                mEleStr = jsonObject.getString("ele");                mTvLogo.setText(viewtitle);            } catch (JSONException e) {                e.printStackTrace();            }        }    }    @Override    protected void initAction() {        mCancleBtn.setOnClickListener(this);        mClearBtn.setOnClickListener(this);        mFinishBtn.setOnClickListener(this);        mSignatureView.setSignatureCallBack(this);        findViewById(R.id.iv_back).setOnClickListener(v -> finish());    }    @Override    protected void initData() {    }    @Override    public void onClick(View view) {        super.onClick(view);        switch (view.getId()) {            case R.id.cancleBtn:                finish();                break;            case R.id.clearBtn:                if (mSignatureView.isDown)                    mSignatureView.clear();                break;            case R.id.finishBtn:                if (mSignatureView.isDown) {                    mSignatureView.makeSignCanvasAsBitmap(false);                } else {                    Toast.makeText(getBaseContext(), "请先签名", Toast.LENGTH_SHORT).show();                }                break;        }    }    Html.ImageGetter imageGetter = source -> {        int id = Integer.parseInt(source);        Drawable d = getResources().getDrawable(id);        d.setBounds(0, 0, d.getIntrinsicWidth(), d.getIntrinsicHeight());        return d;    };    @Override    public void onSignCanvasCompeleted(View view, Bitmap bitmap) {        //画布保存Bitmap        //截取布局        try {            if (bitmap != null) {                //转为base64图片流                boolean isOver= clipCurSignView(bitmap);                if (isOver) {                    //成功则将Base64返回H5                    Intent intent = new Intent();                    try {                        //回调H5方法//                        intent.putExtra(Constans.INTENG_CALLBACK_FLAG, callback);//                        intent.putExtra(Constans.INTENG_FLAG,mEleStr);//                        setResult(Activity.RESULT_OK, intent);                        finish();                    } catch (Exception e) {                        e.printStackTrace();                    }                } else {                    ToastTools.showToast(this, getString(R.string.sign_error));                }            } else {                ToastTools.showToast(this, getString(R.string.sign_error));            }        } catch (Exception e) {            e.printStackTrace();        }    }    @Override    public void onSignScreenCompeleted(View view, Bitmap bitmap) {        //截屏保存Bitmap    }    @Override    public void onSignStarted() {        //开始签名        mClearBtn.setEnabled(true);        mFinishBtn.setEnabled(true);    }    @Override    public void onClearFinish() {        //清除签名        mClearBtn.setEnabled(false);        mFinishBtn.setEnabled(false);    }    @Override    public void onSignScreenFailed(View view, Exception e) {        //失败    }    /**     * 截取当前布局截屏并对签名canvas bitmap保存为文件     *     * @return     */    private boolean clipCurSignView(Bitmap bitmap) {        if (bitmap == null)            return false;        if (!FileUtil.saveBitmap(bitmap, Constants.SIGN_FILE_PATH+"/sign_canvas.png"))            return false;        mSaveView.setDrawingCacheEnabled(true);        mSaveView.buildDrawingCache();        Bitmap layoutBitmap = Bitmap.createBitmap(mSaveView.getDrawingCache());        if (layoutBitmap == null)            return false;        if (!FileUtil.saveBitmap(layoutBitmap, Constants.SIGN_FILE_PATH+"/sign_screen.png"))            return false;        bitmap.recycle();        layoutBitmap.recycle();        //如果数据转换正常，重置Canvas        mSignatureView.clear();        return true;    }}